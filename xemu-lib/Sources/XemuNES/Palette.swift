import XemuFoundation

public struct Palette: Sendable {
    public let data: [u8]
    
    init(_ data: [u8]) {
        self.data = data
    }
    
    public static let `default`: Palette = .init([
        0x62, 0x62, 0x62,
        0x00, 0x2c, 0x7c,
        0x11, 0x15, 0x9c,
        0x36, 0x03, 0x9c,
        0x55, 0x00, 0x7c,
        0x67, 0x00, 0x44,
        0x67, 0x07, 0x03,
        0x55, 0x1c, 0x00,
        0x36, 0x32, 0x00,
        0x11, 0x44, 0x00,
        0x00, 0x4e, 0x00,
        0x00, 0x4c, 0x03,
        0x00, 0x40, 0x44,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,
        
        0xab, 0xab, 0xab,
        0x12, 0x60, 0xce,
        0x3d, 0x42, 0xfa,
        0x6e, 0x29, 0xfa,
        0x99, 0x1c, 0xce,
        0xb1, 0x1e, 0x81,
        0xb1, 0x2f, 0x29,
        0x99, 0x4a, 0x00,
        0x6e, 0x69, 0x00,
        0x3d, 0x82, 0x00,
        0x12, 0x8f, 0x00,
        0x00, 0x8d, 0x29,
        0x00, 0x7c, 0x81,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,
        
        0xff, 0xff, 0xff,
        0x60, 0xb2, 0xff,
        0x8d, 0x92, 0xff,
        0xc0, 0x78, 0xff,
        0xec, 0x6a, 0xff,
        0xff, 0x6d, 0xd4,
        0xff, 0x7f, 0x79,
        0xec, 0x9b, 0x2a,
        0xc0, 0xba, 0x00,
        0x8d, 0xd4, 0x00,
        0x60, 0xe2, 0x2a,
        0x47, 0xe0, 0x79,
        0x47, 0xce, 0xd4,
        0x4e, 0x4e, 0x4e,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00,
        
        0xff, 0xff, 0xff,
        0xbf, 0xe0, 0xff,
        0xd1, 0xd3, 0xff,
        0xe6, 0xc9, 0xff,
        0xf7, 0xc3, 0xff,
        0xff, 0xc4, 0xee,
        0xff, 0xcb, 0xc9,
        0xf7, 0xd7, 0xa9,
        0xe6, 0xe3, 0x97,
        0xd1, 0xee, 0x97,
        0xbf, 0xf3, 0xa9,
        0xb5, 0xf2, 0xc9,
        0xb5, 0xeb, 0xee,
        0xb8, 0xb8, 0xb8,
        0x00, 0x00, 0x00,
        0x00, 0x00, 0x00
    ])
    
    public func color(for index: Int) -> (u8, u8, u8) {
        let offset = index * 3
        
        return (data[offset], data[offset + 1], data[offset + 2])
    }
}
